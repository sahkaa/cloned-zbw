buildscript {
    ext {
        versions = [
                springBoot          : '2.0.0.RELEASE',
                springCloud         : 'Finchley.M9',
                ioSpringPlatform    : 'Cairo-RC1',
                logstashGelf        : '1.7.2',
                springFoxSwagger    : '2.8.0'
        ]
        // Spring repositories
        springReleaseRepo = 'https://repo.spring.io/libs-release'
        springSnapshotRepo = 'https://repo.spring.io/snapshot'
        springMilestoneRepo = 'https://repo.spring.io/milestone'
    }
    repositories {
        mavenCentral()
        maven { url gradlePluginsRepo }
        maven { url springReleaseRepo }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2'
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    }
}

def baseProjects = [
    project(":service:base:logging"),
    project(":service:base:logging-test")
]
def springCloudProjects = []
def springBootProjects = [
    project(":service:sample-zbw-api")
] + springCloudProjects
def springProjects = [
    project(":service:aurea-boot-autoconfigure:data"),
    project(":service:aurea-boot-autoconfigure:mail"),
    project(":service:aurea-boot-autoconfigure:rest-api"),
    project(":service:aurea-boot-autoconfigure:rest-api-user"),
    project(":service:aurea-boot-autoconfigure:oauth2"),
    project(":service:aurea-boot-module:data-user"),
    project(":service:aurea-boot-starter:rest-api-oauth2-starter"),
    project(":service:aurea-boot-starter:rest-api-user-oauth2-starter")
] + springBootProjects
def javaProjectsWithIt = []
def javaProjectsWithSmoke = []
def javaProjects = javaProjectsWithIt + javaProjectsWithSmoke + springProjects

configure(javaProjects + baseProjects) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply from: "${serviceGradleDir}/staticCodeAnalysis.gradle"
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
            mavenBom "io.spring.platform:platform-bom:${versions.ioSpringPlatform}"
        }
        dependencies {
            dependency "biz.paluch.logging:logstash-gelf:${versions.logstashGelf}"
            dependency "io.springfox:springfox-swagger-ui:${versions.springFoxSwagger}"
            dependency "io.springfox:springfox-swagger2:${versions.springFoxSwagger}"
        }
    }

    repositories {
        mavenCentral()
        maven { url springMilestoneRepo }
    }

    group = 'com.aurea.boot'

    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.16.20'
        testCompileOnly 'org.projectlombok:lombok:1.16.20'
    }
}

configure(javaProjects) {
    dependencies {
        compile project(":service:base:logging")
        testCompile project(":service:base:logging-test")
    }
}

configure(javaProjectsWithIt) {
    apply from: "${serviceGradleDir}/testing-it.gradle"
}

configure(javaProjectsWithSmoke) {
    apply from: "${serviceGradleDir}/testing-smoke.gradle"
}

configure(springBootProjects) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
    }
}

configure(springProjects) {

    dependencies {
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.springframework.security:spring-security-test'

    }
}
